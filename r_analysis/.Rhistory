prev_feedback = ifelse(task=="probe", lag(feedback,n=4),""), ## Flagging previous feedback in probe trial
prev_loss = ifelse(prev_feedback == "monetary_loss", 1,0), ## Flagging if monetary loss happened before this probe
prev_correct = lag(correct,n=5), ## flagging previous correct
prev_congruency = lag(congruency, n=5), ## creating previous congruency variable
block_feedback_type = lead(feedback_type)) ## moving feedback type data to probe variable
raw_data = raw_data %>%
mutate(correct = if_else(correct == "true", 1, 0))
raw_data = raw_data %>%
mutate(prev_correct = if_else(prev_correct == "true", 1, 0))
#Filtering columns
processed_data = raw_data %>%
select(-trial_type,
-trial_index,
-plugin_version,
-success,
-question_order,
-slider_start,
-stimulus,
-time_elapsed)
processed_data = raw_data %>% # Keeping only probe rows
filter(task=="probe")
processed_data = processed_data %>%
filter(name != "practice")
processed_data =processed_data %>% ## filtering out first trials here
filter(!is.na(prev_feedback))
accuracy_df = processed_data %>%
group_by(subj_code) %>%
summarise(all_accuracy = mean(correct))
processed_data = processed_data %>%
left_join(accuracy_df, by = "subj_code")
processed_data = processed_data %>%
filter(all_accuracy > 0.60)
processed_rt_data = processed_data %>%
filter(correct == "1",
prev_correct == "1")
View(processed_data)
View(processed_data)
processed_data %>%
group_by(subj_code) %>%
summarise(full_time = max(time_elapsed, na.rm = TRUE))
View(raw_data)
processed_data %>%
group_by(subj_code) %>%
summarise(full_time = max(time_elapsed))
processed_data %>%
group_by(subj_code) %>%
summarise(full_time = max(as.numeric(time_elapsed)))
processed_data %>%
group_by(subj_code) %>%
summarise(full_time = max(as.numeric(time_elapsed))) %>%
mutate(duration_min = full_time / 1000 / 60)
processed_data %>%
group_by(subj_code) %>%
summarise(full_time = max(as.numeric(time_elapsed))) %>%
mutate(duration_min = full_time / 1000 / 60)
processed_data = processed_data %>%
filter(duration_min < 120)
processed_data %>%
group_by(subj_code) %>%
summarise(full_time = max(as.numeric(time_elapsed))) %>%
mutate(duration_min = full_time / 1000 / 60)
processed_data = processed_data %>%
group_by(subj_code) %>%
summarise(full_time = max(as.numeric(time_elapsed))) %>%
mutate(duration_min = full_time / 1000 / 60)
processed_data = processed_data %>%
filter(duration_min < 120)
#Filtering columns
processed_data = raw_data %>%
select(-trial_type,
-trial_index,
-plugin_version,
-success,
-question_order,
-slider_start,
-stimulus,
-time_elapsed)
processed_data = raw_data %>% # Keeping only probe rows
filter(task=="probe")
processed_data = processed_data %>%
filter(name != "practice")
processed_data =processed_data %>% ## filtering out first trials here
filter(!is.na(prev_feedback))
accuracy_df = processed_data %>%
group_by(subj_code) %>%
summarise(all_accuracy = mean(correct))
processed_data = processed_data %>%
left_join(accuracy_df, by = "subj_code")
processed_data = processed_data %>%
filter(all_accuracy > 0.60)
processed_data = processed_data %>%
group_by(subj_code) %>%
summarise(full_time = max(as.numeric(time_elapsed))) %>%
mutate(duration_min = full_time / 1000 / 60)
processed_data = processed_data %>%
filter(- duration_min < 120)
View(processed_data)
processed_data = processed_data %>%
group_by(subj_code) %>%
summarise(full_time = max(as.numeric(time_elapsed))) %>%
mutate(duration_min = full_time / 1000 / 60)
#Filtering columns
processed_data = raw_data %>%
select(-trial_type,
-trial_index,
-plugin_version,
-success,
-question_order,
-slider_start,
-stimulus,
-time_elapsed)
processed_data = raw_data %>% # Keeping only probe rows
filter(task=="probe")
processed_data = processed_data %>%
filter(name != "practice")
processed_data =processed_data %>% ## filtering out first trials here
filter(!is.na(prev_feedback))
processed_data = processed_data %>%
group_by(subj_code) %>%
summarise(full_time = max(as.numeric(time_elapsed))) %>%
mutate(duration_min = full_time / 1000 / 60)
processed_data = processed_data %>%
filter(-duration_min < 120)
#Filtering columns
processed_data = raw_data %>%
select(-trial_type,
-trial_index,
-plugin_version,
-success,
-question_order,
-slider_start,
-stimulus,
-time_elapsed)
processed_data = raw_data %>% # Keeping only probe rows
filter(task=="probe")
processed_data = processed_data %>%
filter(name != "practice")
processed_data =processed_data %>% ## filtering out first trials here
filter(!is.na(prev_feedback))
time_df = processed_data %>%
group_by(subj_code) %>%
summarise(full_time = max(as.numeric(time_elapsed))) %>%
mutate(duration_min = full_time / 1000 / 60)
processed_data = processed_data %>%
left_join(time_df, by = "subj_code") %>%
filter(duration_min < 120)
View(time_df)
demography_data <- raw_data %>%
filter(
trial_type %in% c(
"survey-text",
"survey-multi-choice"))
demography_data <- demography_data %>%
select(
response,
subj_code
)
demography_data <- demography_data %>%
mutate(
age = str_extract(response, '"age":"\\d+"') %>%
str_extract("\\d+") %>%
as.numeric(),
education = str_extract(response, '"education":"[^"]+"') %>%
str_remove_all('"education":"') %>%
str_remove('"'),
gender = str_extract(response, '"gender":"[^"]+"') %>%
str_remove_all('"gender":"') %>%
str_remove('"')
)
demography_data <- demography_data %>%
select(-response)
demography_data <- demography_data %>%
group_by(subj_code) %>%
summarize(
age = coalesce(age[1], age[2]),
education = coalesce(education[1], education[2]),
gender = coalesce(gender[1], gender[2])
)
View(demography_data)
View(demography_data)
demography_data = raw_data %>%
filter(trial_type %in% c("survey-text", "survey-multi-choice"))
demography_data = demography_data %>%
select(response, subj_code)
demography_data = demography_data %>%
mutate(age = str_extract(response, '"age":"\\d+"') %>%
str_extract("\\d+") %>%
as.numeric(),
education = str_extract(response, '"education":"[^"]+"') %>%
str_remove_all('"education":"') %>%
str_remove('"'),
gender = str_extract(response, '"gender":"[^"]+"') %>%
str_remove_all('"gender":"') %>%
str_remove('"'))
View(demography_data)
demography_data = demography_data %>%
select(-response)
panas_data = raw_data %>%
filter( trial_type == "survey-likert")
View(panas_data)
View(raw_data)
View(raw_data)
panas_data = panas_data %>%
select(-rt,
-stimulus,
-trial_index,
-plugin_version,
-time_elapsed,
-success,
-question_order,
-task,
-correct_response,
-congruency,
-name,
-correct,
-slider_start,
-feedback_type,
-trial_type)
View(panas_data)
panas_data = panas_data %>%
mutate(item = str_extract(response, '"(.*?)"') %>% str_remove_all('"'),
value = str_extract(response, ':\\d+') %>% str_remove(':') %>% as.numeric()) %>%
select(item, value, subj_code)
View(panas_data)
panas_data = raw_data %>%
filter(trial_type == "survey-likert")
View(panas_data)
panas_df = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",
ifelse(lag(trial_type, 1) != "survey-likert",
ifelse(lag(trial_type, 4) == "practice",
"panas_first",
paste0("panas_", lag(feedback_type,0))
),
NA_character_),
NA_character_))
View(panas_df)
panas_df = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(trial_type, 1) == "survey-likert" ~ lag(panas_condition,1),
lag(name, 4) == "practice" ~ "first_panas",
lag(trial_type,1)!="survey-likert" & lag(feedback_type, 4)==T ~ paste0("panas_",lag(feedback_type,4))
), ""))
panas_df = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(trial_type,1)!="survey-likert" & lag(feedback_type, 4)==T ~ paste0("panas_",lag(feedback_type,4))
), ""))
View(panas_df)
panas_df = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(feedback_type, 4) ~ paste0("panas_",lag(feedback_type,4))
), ""))
panas_df = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(feedback_type, 4)!="NA" ~ paste0("panas_",lag(feedback_type,4))
), ""))
panas_df = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(feedback_type, 4)!="NA" & lag(trial_type)!="survey-likert" ~ paste0("panas_",lag(feedback_type,4))
), ""))
panas_df = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(feedback_type, 4)!="NA" & lag(trial_type)!="survey-likert" ~ paste0("panas_",lag(feedback_type,4))
), "")) %>%
mutate(panas_condition = ifelse(lag(trial_type, 1) == "survey-likert",lag(panas_condition,1),""))
panas_df = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(feedback_type, 4)!="NA" & lag(trial_type)!="survey-likert" ~ paste0("panas_",lag(feedback_type,4))
), "")) %>%
while(lag(panas_condition,1)!="NA"){
mutate(panas_condition = lag(panas_condition,1))
}
raw_data = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(feedback_type, 4)!="NA" & lag(trial_type)!="survey-likert" ~ paste0("panas_",lag(feedback_type,4))
), ""))
start_row = which(raw_data$panas_condition != "")[1]
if (!is.na(start_row)) {
value_to_fill = raw_data$panas_condition[start_row]
raw_data = raw_data %>%
mutate(panas_condition = if_else(
row_number() >= start_row & row_number() < start_row + 20,
value_to_fill,
panas_condition
))
}
View(raw_data)
raw_data = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(feedback_type, 4)!="NA" & lag(trial_type)!="survey-likert" ~ paste0("panas_",lag(feedback_type,4))
), ""))
start_row = which(raw_data$panas_condition != "")[1]
if (!is.na(start_row)) {
value_to_fill = raw_data$panas_condition[start_row]
raw_data = raw_data %>%
mutate(panas_condition = if_else(
row_number() >= start_row & row_number() < start_row + 20,
value_to_fill,
panas_condition
))
}
raw_data = raw_data %>%
mutate(panas_condition_filled = panas_condition)
start_rows = which(raw_data$panas_condition != "")
for (start_row in start_rows) {
end_row = min(start_row + 19, nrow(raw_data))
value_to_fill = raw_data$panas_condition[start_row]
raw_data$panas_condition_filled[start_row:end_row] = value_to_fill
}
ifelse(trial_type == "survey-likert", case_when()
ifelse(lag(trial_type, 1) != "survey-likert",
View(raw_data)
raw_data <- read.csv("pilotresults.csv")
raw_data = raw_data %>%
mutate(feedback = case_when(grepl(">✘</div>",stimulus) ~ "visual_punishment", # flagging different feedback events in new variable
grepl("&#11036", stimulus) ~ "neutral",
grepl(">✘<br>5 garast veszítettél</div>",stimulus) ~ "monetary_loss",
grepl("✔",stimulus) ~ "tickmark"
),
prev_feedback = ifelse(task=="probe", lag(feedback,n=4),""), ## Flagging previous feedback in probe trial
prev_loss = ifelse(prev_feedback == "monetary_loss", 1,0), ## Flagging if monetary loss happened before this probe
prev_correct = lag(correct,n=5), ## flagging previous correct
prev_congruency = lag(congruency, n=5), ## creating previous congruency variable
block_feedback_type = lead(feedback_type)) ## moving feedback type data to probe variable
raw_data = raw_data %>%
mutate(correct = if_else(correct == "true", 1, 0))
raw_data = raw_data %>%
mutate(prev_correct = if_else(prev_correct == "true", 1, 0))
raw_data = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(feedback_type, 4)!="NA" & lag(trial_type)!="survey-likert" ~ paste0("panas_",lag(feedback_type,4))
), ""))
start_row = which(raw_data$panas_condition != "")[1]
raw_data = raw_data %>%
mutate(panas_condition_filled = panas_condition)
start_rows = which(raw_data$panas_condition != "")
for (start_row in start_rows) {
end_row = min(start_row + 19, nrow(raw_data))
value_to_fill = raw_data$panas_condition[start_row]
raw_data$panas_condition_filled[start_row:end_row] = value_to_fill
}
'if (!is.na(start_row)) {
value_to_fill = raw_data$panas_condition[start_row]
raw_data = raw_data %>%
mutate(panas_condition = if_else(
row_number() >= start_row & row_number() < start_row + 20,
value_to_fill,
panas_condition
))
}  '
View(raw_data)
raw_data <- read.csv("pilotresults.csv")
raw_data = raw_data %>%
mutate(feedback = case_when(grepl(">✘</div>",stimulus) ~ "visual_punishment", # flagging different feedback events in new variable
grepl("&#11036", stimulus) ~ "neutral",
grepl(">✘<br>5 garast veszítettél</div>",stimulus) ~ "monetary_loss",
grepl("✔",stimulus) ~ "tickmark"
),
prev_feedback = ifelse(task=="probe", lag(feedback,n=4),""), ## Flagging previous feedback in probe trial
prev_loss = ifelse(prev_feedback == "monetary_loss", 1,0), ## Flagging if monetary loss happened before this probe
prev_correct = lag(correct,n=5), ## flagging previous correct
prev_congruency = lag(congruency, n=5), ## creating previous congruency variable
block_feedback_type = lead(feedback_type)) ## moving feedback type data to probe variable
raw_data = raw_data %>%
mutate(correct = if_else(correct == "true", 1, 0))
raw_data = raw_data %>%
mutate(prev_correct = if_else(prev_correct == "true", 1, 0))
raw_data = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(feedback_type, 4)!="NA" & lag(trial_type)!="survey-likert" ~ paste0("panas_",lag(feedback_type,4))
), ""))
start_row = which(raw_data$panas_condition != "")[1]
raw_data = raw_data %>%
#mutate(panas_condition_filled = panas_condition)
start_rows = which(raw_data$panas_condition != "")
raw_data = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(feedback_type, 4)!="NA" & lag(trial_type)!="survey-likert" ~ paste0("panas_",lag(feedback_type,4))
), ""))
start_row = which(raw_data$panas_condition != "")[1]
#raw_data = raw_data %>%
#mutate(panas_condition_filled = panas_condition)
start_rows = which(raw_data$panas_condition != "")
for (start_row in start_rows) {
end_row = min(start_row + 19, nrow(raw_data))
value_to_fill = raw_data$panas_condition[start_row]
raw_data$panas_condition [start_row:end_row] = value_to_fill
}
'if (!is.na(start_row)) {
value_to_fill = raw_data$panas_condition[start_row]
raw_data = raw_data %>%
mutate(panas_condition = if_else(
row_number() >= start_row & row_number() < start_row + 20,
value_to_fill,
panas_condition
))
}  '
raw_data <- read.csv("pilotresults.csv")
raw_data = raw_data %>%
mutate(feedback = case_when(grepl(">✘</div>",stimulus) ~ "visual_punishment", # flagging different feedback events in new variable
grepl("&#11036", stimulus) ~ "neutral",
grepl(">✘<br>5 garast veszítettél</div>",stimulus) ~ "monetary_loss",
grepl("✔",stimulus) ~ "tickmark"
),
prev_feedback = ifelse(task=="probe", lag(feedback,n=4),""), ## Flagging previous feedback in probe trial
prev_loss = ifelse(prev_feedback == "monetary_loss", 1,0), ## Flagging if monetary loss happened before this probe
prev_correct = lag(correct,n=5), ## flagging previous correct
prev_congruency = lag(congruency, n=5), ## creating previous congruency variable
block_feedback_type = lead(feedback_type)) ## moving feedback type data to probe variable
raw_data = raw_data %>%
mutate(correct = if_else(correct == "true", 1, 0))
raw_data = raw_data %>%
mutate(prev_correct = if_else(prev_correct == "true", 1, 0))
raw_data = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(feedback_type, 4)!="NA" & lag(trial_type)!="survey-likert" ~ paste0("panas_",lag(feedback_type,4))
), ""))
#start_row = which(raw_data$panas_condition != "")[1]
start_rows = which(raw_data$panas_condition != "")
for (start_row in start_rows) {
end_row = min(start_row + 19, nrow(raw_data))
value_to_fill = raw_data$panas_condition[start_row]
raw_data$panas_condition [start_row:end_row] = value_to_fill
}
raw_data <- read.csv("pilotresults.csv")
raw_data = raw_data %>%
mutate(feedback = case_when(grepl(">✘</div>",stimulus) ~ "visual_punishment", # flagging different feedback events in new variable
grepl("&#11036", stimulus) ~ "neutral",
grepl(">✘<br>5 garast veszítettél</div>",stimulus) ~ "monetary_loss",
grepl("✔",stimulus) ~ "tickmark"
),
prev_feedback = ifelse(task=="probe", lag(feedback,n=4),""), ## Flagging previous feedback in probe trial
prev_loss = ifelse(prev_feedback == "monetary_loss", 1,0), ## Flagging if monetary loss happened before this probe
prev_correct = lag(correct,n=5), ## flagging previous correct
prev_congruency = lag(congruency, n=5), ## creating previous congruency variable
block_feedback_type = lead(feedback_type)) ## moving feedback type data to probe variable
raw_data = raw_data %>%
mutate(correct = if_else(correct == "true", 1, 0))
raw_data = raw_data %>%
mutate(prev_correct = if_else(prev_correct == "true", 1, 0))
raw_data = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(feedback_type, 4)!="NA" & lag(trial_type)!="survey-likert" ~ paste0("panas_",lag(feedback_type,4))
), ""))
start_rows = which(raw_data$panas_condition != "") #Ez végigfut a kódon és flagel minden egyes olyan helyet, ahol a panas_condition nem üres. Ezek lesznek a start row-ok, amiknek van egy értéke -> c(292, 1534, 2776 stb.).
for (start_row in start_row) { #ez elindít egy loopot, m
end_row = min(start_row + 19, nrow(raw_data))
value_to_fill = raw_data$panas_condition[start_row]
raw_data$panas_condition [start_row:end_row] = value_to_fill
}
raw_data = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(feedback_type, 4)!="NA" & lag(trial_type)!="survey-likert" ~ paste0("panas_",lag(feedback_type,4))
), ""))
start_rows = which(raw_data$panas_condition != "") #Ez végigfut a kódon és flagel minden egyes olyan helyet, ahol a panas_condition nem üres. Ezek lesznek a start row-ok, amiknek van egy értéke -> c(292, 1534, 2776 stb.).
for (start_row in start_rows) { #ez elindít egy loopot, m
end_row = min(start_row + 19, nrow(raw_data))
value_to_fill = raw_data$panas_condition[start_row]
raw_data$panas_condition [start_row:end_row] = value_to_fill
}
raw_data = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(feedback_type, 4)!="NA" & lag(trial_type)!="survey-likert" ~ paste0("panas_",lag(feedback_type,4))
), ""))
start_rows = which(raw_data$panas_condition != "") #Ez végigfut a kódon és flagel minden egyes olyan helyet, ahol a panas_condition nem üres. Ezek lesznek a start row-ok, amiknek van egy értéke -> c(292, 1534, 2776 stb.).
for (start_row in start_rows) { #ez elindít egy loopot, ami minden start rows értéket megtalál
end_row = min(start_row + 19) #nrow(raw_data)) #Et meghatározza az utolsó kitöltendő sort. A start row érték után a 19. ig töltsed ki értékkel. Az nrow(raw_data) pedig azt jelenti, hogy h
value_to_fill = raw_data$panas_condition[start_row]
raw_data$panas_condition [start_row:end_row] = value_to_fill
}
raw_data <- read.csv("pilotresults.csv")
raw_data = raw_data %>%
mutate(feedback = case_when(grepl(">✘</div>",stimulus) ~ "visual_punishment", # flagging different feedback events in new variable
grepl("&#11036", stimulus) ~ "neutral",
grepl(">✘<br>5 garast veszítettél</div>",stimulus) ~ "monetary_loss",
grepl("✔",stimulus) ~ "tickmark"
),
prev_feedback = ifelse(task=="probe", lag(feedback,n=4),""), ## Flagging previous feedback in probe trial
prev_loss = ifelse(prev_feedback == "monetary_loss", 1,0), ## Flagging if monetary loss happened before this probe
prev_correct = lag(correct,n=5), ## flagging previous correct
prev_congruency = lag(congruency, n=5), ## creating previous congruency variable
block_feedback_type = lead(feedback_type)) ## moving feedback type data to probe variable
raw_data = raw_data %>%
mutate(correct = if_else(correct == "true", 1, 0))
raw_data = raw_data %>%
mutate(prev_correct = if_else(prev_correct == "true", 1, 0))
raw_data = raw_data %>%
mutate(panas_condition = ifelse(trial_type == "survey-likert",case_when(
lag(name, 4) == "practice" ~ "first_panas",
lag(feedback_type, 4)!="NA" & lag(trial_type)!="survey-likert" ~ paste0("panas_",lag(feedback_type,4))
), ""))
start_rows = which(raw_data$panas_condition != "") #Ez végigfut a kódon és flagel minden egyes olyan helyet, ahol a panas_condition nem üres. Ezek lesznek a start row-ok, amiknek van egy értéke -> c(292, 1534, 2776 stb.).
for (start_row in start_rows) { #ez elindít egy loopot, ami minden start rows értéket megtalál
end_row = min(start_row + 19) #Ez meghatározza az utolsó kitöltendő sort. A start row érték után a 19. ig töltsed ki értékkel. gy h
value_to_fill = raw_data$panas_condition[start_row]
raw_data$panas_condition [start_row:end_row] = value_to_fill
}
